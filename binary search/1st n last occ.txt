Write a function that takes in a sorted array of integers as well as a target integer.
The function should use a variation of the binary search algorithm to find a range of indices in between which the target number is contained in the array and should return  this range in the form of an array

The first number in the output array should represent the first index at which the target number is located, while the second number should represent the last index at which the target number is located. The function should return [ -1, -1 ] if the integer is not contained in the array


Sample Input :
array = [ 0 ,1,21,33,45,45,45,45,45,45,61,71,73]
target = 45

Sample Output :
[ 4 , 9 ]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include<bits/stdc++.h>
using namespace std;




int first(int arr[],int target,int n){
	
	int left=0;
	int right=n-1;
	
	int res=-1;
	
	while(left<right){
		int mid=right+(left-right)/2;
		
		if(arr[mid]==target){
			res= mid;  //mid ko store ke or answer ko store kar ki aage
            // fir se left me search karna hai fir se answer nikal rahe
			right=mid-1;//fir se lest me continue
		}else if(arr[mid]>target){
			right=mid-1;//same 
		}else{
			left=mid+1;
		}
		
	}	
	
	return res;	
}

int last(int arr[],int target,int n){
	
	int left=0;
	int right=n-1;
	
	int res=-1;
	
	while(left<right){
		int mid=right+(left-right)/2;
		
		if(arr[mid]==target){
			res=mid;// remember 
			left=mid+1; //same
		}else if(arr[mid]>target){
			right=mid-1;
		}else{
			left=mid+1; //same
		}
		
	}	
	return res;	
}

int main(){
  int n=13;
  int arr[n]={0,1,21,33,45,45,45,45,45,45,61,71,73};
  
  int target=45;
  
 int ans= first(arr,target,n);

      int ans2= last(arr,target,n);
 
cout<<ans<<" "<<ans2;

return 0;
}

//5 8
